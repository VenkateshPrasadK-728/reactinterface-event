{"version":3,"sources":["js/Register.js","js/ListUsers.js","js/service.js","js/App.js","serviceWorker.js","index.js"],"names":["Register","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userName","eventName","eventDate","regNo","phoneNo","handleChange","bind","assertThisInitialized","handleAdd","e","preventDefault","temp","props","registerForm","setState","toggleForm","target","value","name","defineProperty","react_default","a","createElement","className","formDisplay","onClick","fa","id","noValidate","onSubmit","htmlFor","readOnly","type","placeholder","onChange","Component","ListUsers","registerUsers","map","item","key","eventId","contentEditable","suppressContentEditableWarnin","dist_default","date","parse","format","deleteUser","DETAILS_API_URL","concat","axios","get","App","registerusers","lastIndex","apt","userId","push","without","_this2","fetch","then","response","json","result","js_Register","js_ListUsers","updateInfo","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7cc7eaf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FaPlus } from 'react-icons/fa';\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userName: '',\n      eventName: '',\n      eventDate: '',\n      regNo: '',\n      phoneNo: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  handleAdd(e) {\n    e.preventDefault();\n    let temp = {\n      userName: this.state.userName,\n      eventName: this.state.eventName,\n      eventDate: this.state.eventDate,\n      regNo: this.state.regNo,\n      phoneNo: this.state.phoneNo\n    };\n\n    this.props.registerForm(temp);\n\n    this.setState({\n      userName: '',\n      eventName: '',\n      eventDate: '',\n      regNo: '',\n      phoneNo: ''\n    });\n    this.props.toggleForm();\n  }\n\n  handleChange(e) {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <div\n        className={\n          'card textcenter mt-3 ' +\n          (this.props.formDisplay ? '' : 'register-user')\n        }\n      >\n        <div\n          className=\"apt-addheading card-header bg-primary text-white\"\n          onClick={this.props.toggleForm}\n        >\n          <FaPlus /> Register\n        </div>\n\n        <div className=\"card-body\">\n          <form id=\"registerForm\" noValidate onSubmit={this.handleAdd}>\n            <div className=\"form-group form-row\">\n              <label\n                className=\"col-md-2 col-form-label text-md-right\"\n                htmlFor=\"userName\"\n                readOnly\n              >\n                Enter Name\n              </label>\n              <div className=\"col-md-10\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"userName\"\n                  placeholder=\"Your Name\"\n                  value={this.state.userName}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group form-row\">\n              <label\n                className=\"col-md-2 col-form-label text-md-right\"\n                htmlFor=\"eventName\"\n              >\n                Event Name\n              </label>\n              <div className=\"col-md-10\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"eventName\"\n                  placeholder=\"Event Name\"\n                  value={this.state.eventName}\n                  onChange={this.handleChange}\n                />\n\n              </div>\n            </div>\n\n            <div className=\"form-group form-row\">\n              <label\n                className=\"col-md-2 col-form-label text-md-right\"\n                htmlFor=\"eventDate\"\n              >\n                Event Date\n              </label>\n              <div className=\"col-md-4\">\n                <input\n                  type=\"date\"\n                  className=\"form-control\"\n                  name=\"eventDate\"\n                  id=\"eventDate\"\n                  value={this.state.eventDate}\n                  onChange={this.handleChange}\n                />\n              </div>\n              <label\n                className=\"col-md-2 col-form-label text-md-right\"\n                htmlFor=\"regNo\"\n              >\n                Reg No\n              </label>\n              <div className=\"col-md-4\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"regNo\"\n                  id=\"regNo\"\n                  value={this.state.regNo}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group form-row\">\n              <label className=\"col-md-2 text-md-right\" htmlFor=\"phoneNo\">\n                Phone No\n              </label>\n              <div className=\"col-md-10\">\n                <input\n                type=\"text\"\n                  className=\"form-control\"\n                  name=\"phoneNo\"\n                  id=\"phoneNo\"\n                  placeholder=\"Phone No\"\n                  value={this.state.phoneNo}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group form-row mb-0\">\n              <div className=\"offset-md-2 col-md-10\">\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary d-block ml-auto\"\n                >\n                  Submit\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React, { Component } from 'react';\nimport { FaTimes } from 'react-icons/fa';\nimport Moment from 'react-moment';\n\nclass ListUsers extends Component {\n  render() {\n    return (\n      <div className=\"register-list item-list mb-3\">\n        {this.props.registerUsers.map(item => (\n          <div className=\"user-list col media py-3\" key={item.eventId}>\n           \n\n            <div className=\"user-info media-body\">\n              <div className=\"user-head\">\n                <span\n                  className=\"user-name\"\n                  contentEditable\n                  suppressContentEditableWarnin\n                >\n                  {item.eventId}--{item.userName}\n                </span>\n                <span>                  </span>\n                <span className=\"event-date ml-auto\"    >\n                  <Moment\n                    date={item.eventDate}\n                    parse=\"YYYY-MM-dd hh:mm\"\n                    format=\"MMM-d h:mma\"\n                      />\n                </span>\n              </div>\n\n              <div className=\"event-name\">\n                <span className=\"label-item\">Event Name: </span>\n                  {item.eventName}\n              </div>\n              <div\n                className=\"phone-no\"\n                contentEditable\n              >\n                Phone No: \n                {item.phoneNo}\n              </div>\n            </div>\n            <div className=\"update-info\">\n              <button\n                className=\"update-btn btn btn-sm btn-danger\"\n                \n              >\n                 Update\n              </button>\n              &nbsp;&nbsp;\n            </div>\n            <span>   </span>\n            <div className=\"mr-3\">\n              <button\n                className=\"user-delete btn btn-sm btn-danger\"\n                onClick={() => this.props.deleteUser(item)}\n              >\n               Delete\n              </button>\n            </div>\n          </div>\n          \n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ListUsers;\n","import axios from 'axios'\r\n\r\nconst EVENT_API_URL = 'http://localhost:8080'\r\nconst DETAILS_API_URL = `${EVENT_API_URL}/details`\r\n\r\nclass DataService {\r\n    retrieveAlldetails(name) {\r\n        return axios.get(`${DETAILS_API_URL}`);\r\n    }\r\n}\r\nexport default new DataService()","import React, { Component } from 'react';\nimport '../css/App.css';\n\nimport Register from './Register';\nimport ListUsers from './ListUsers';\n\nimport DataService from './service'\n\nimport { findIndex, without } from 'lodash';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      registerusers: [],\n      formDisplay: false,\n      lastIndex: 0\n    };\n    this.deleteUser = this.deleteUser.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.registerForm = this.registerForm.bind(this);\n\n  }\n\n  toggleForm() {\n    this.setState({\n      formDisplay: !this.state.formDisplay\n    });\n  }\n\n  registerForm(apt) {\n    let temp = this.state.registerusers;\n    apt.userId = this.state.lastIndex;\n    temp.push(apt);\n    this.setState({\n      registerusers: temp,\n      lastIndex: this.state.lastIndex + 1\n    });\n  }\n\n  deleteUser(apt) {\n    let temp = this.state.registerusers;\n    temp = without(temp, apt);\n\n    this.setState({\n      registerusers: temp\n    });\n  }\n\n  componentDidMount() {\n        //fetch(DataService.retrieveAlldetails())\n        //comsole.log(DataService.retrieveAlldetails())\n    fetch('./data.json')\n      .then(response => response.json())\n      .then(result => {\n        const temp = result.map(item => {\n          item.userId = this.state.lastIndex;\n          this.setState({ lastIndex: this.state.lastIndex + 1 });\n          return item;\n        });\n        this.setState({\n          registerusers: temp\n        });\n      });\n  }\n\n\n\n  render() {\n    return (\n      <main className=\"page bg-white\" id=\"petratings\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12 bg-white\">\n              <div className=\"container\">\n                <Register\n                  formDisplay={this.state.formDisplay}\n                  toggleForm={this.toggleForm}\n                  registerForm={this.registerForm}\n                />\n                <ListUsers\n                  registerUsers={this.state.registerusers}\n                  deleteUser={this.deleteUser}\n                  updateInfo={this.updateInfo}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/index.css';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}